blueprint:
  name: Violet Pool - Automatische R√ºcksp√ºlung
  description: |
    Intelligente automatische R√ºcksp√ºlung basierend auf Filterdruck, Laufzeit und Zeitplan.
    Includes Backwash und Rinse-Zyklen mit Sicherheitsfeatures.
  domain: automation
  source_url: https://github.com/xerolux/violet-hass/blob/main/blueprints/automation/pool_backwash_control.yaml
  homeassistant:
    min_version: "2024.6.0"
  input:
    backwash_switch:
      name: R√ºcksp√ºl-Switch
      description: Switch f√ºr die R√ºcksp√ºlung
      selector:
        entity:
          filter:
            - integration: violet_pool_controller
            - domain: switch
    rinse_switch:
      name: Nachsp√ºl-Switch (Optional)
      description: Switch f√ºr die Nachsp√ºlung
      default: ""
      selector:
        entity:
          filter:
            - integration: violet_pool_controller
            - domain: switch
          multiple: false
    pump_switch:
      name: Pumpen-Switch
      description: Hauptpumpe des Pools
      selector:
        entity:
          filter:
            - integration: violet_pool_controller
            - domain: switch
    filter_pressure_sensor:
      name: Filterdruck-Sensor (Optional)
      description: Sensor f√ºr den aktuellen Filterdruck
      default: ""
      selector:
        entity:
          filter:
            - integration: violet_pool_controller
            - domain: sensor
          multiple: false
    
    # === Druckbasierte Steuerung ===
    enable_pressure_control:
      name: Druckbasierte R√ºcksp√ºlung
      description: Automatische R√ºcksp√ºlung bei zu hohem Filterdruck
      default: true
      selector:
        boolean:
    max_filter_pressure:
      name: Maximaler Filterdruck
      description: Druck bei dem R√ºcksp√ºlung ausgel√∂st wird
      default: 1.5
      selector:
        number:
          min: 0.8
          max: 3.0
          step: 0.1
          unit_of_measurement: "bar"
          mode: slider
    
    # === Zeitbasierte Steuerung ===
    enable_scheduled_backwash:
      name: Geplante R√ºcksp√ºlung
      description: R√ºcksp√ºlung nach festen Intervallen
      default: true
      selector:
        boolean:
    backwash_interval_days:
      name: R√ºcksp√ºl-Intervall
      description: Intervall zwischen R√ºcksp√ºlungen in Tagen
      default: 7
      selector:
        number:
          min: 3
          max: 21
          step: 1
          unit_of_measurement: "Tage"
          mode: box
    backwash_time:
      name: R√ºcksp√ºl-Uhrzeit
      description: Bevorzugte Uhrzeit f√ºr geplante R√ºcksp√ºlung
      default: "03:00"
      selector:
        time:
    
    # === Laufzeitbasierte Steuerung ===
    enable_runtime_control:
      name: Laufzeitbasierte R√ºcksp√ºlung
      description: R√ºcksp√ºlung nach bestimmter Pumpenlaufzeit
      default: false
      selector:
        boolean:
    max_pump_runtime_hours:
      name: Maximale Pumpenlaufzeit
      description: Pumpenlaufzeit bis zur n√§chsten R√ºcksp√ºlung
      default: 168
      selector:
        number:
          min: 48
          max: 336
          step: 12
          unit_of_measurement: "Stunden"
          mode: box
    
    # === R√ºcksp√ºl-Parameter ===
    backwash_duration:
      name: R√ºcksp√ºl-Dauer
      description: Dauer der R√ºcksp√ºlung in Sekunden
      default: 120
      selector:
        number:
          min: 30
          max: 300
          step: 15
          unit_of_measurement: "s"
          mode: box
    rinse_duration:
      name: Nachsp√ºl-Dauer
      description: Dauer der Nachsp√ºlung in Sekunden
      default: 30
      selector:
        number:
          min: 10
          max: 120
          step: 5
          unit_of_measurement: "s"
          mode: box
    pre_backwash_pump_off_time:
      name: Pumpen-Stopp vor R√ºcksp√ºlung
      description: Zeit die Pumpe vor R√ºcksp√ºlung gestoppt wird
      default: 30
      selector:
        number:
          min: 10
          max: 120
          step: 10
          unit_of_measurement: "s"
          mode: box
    post_backwash_pump_start_delay:
      name: Pumpen-Start nach R√ºcksp√ºlung
      description: Wartezeit bevor Pumpe nach R√ºcksp√ºlung wieder startet
      default: 60
      selector:
        number:
          min: 30
          max: 300
          step: 15
          unit_of_measurement: "s"
          mode: box
    
    # === Sicherheit ===
    enable_water_level_check:
      name: Wasserstand-Pr√ºfung
      description: R√ºcksp√ºlung nur bei ausreichendem Wasserstand
      default: false
      selector:
        boolean:
    water_level_sensor:
      name: Wasserstand-Sensor (Optional)
      description: Sensor f√ºr den Poolwasserstand
      default: ""
      selector:
        entity:
          filter:
            - integration: violet_pool_controller
            - domain: sensor
          multiple: false
    min_water_level:
      name: Minimaler Wasserstand
      description: Mindest-Wasserstand f√ºr R√ºcksp√ºlung
      default: 50
      selector:
        number:
          min: 20
          max: 100
          step: 5
          unit_of_measurement: "cm"
          mode: box
    
    # === Benachrichtigungen ===
    notification_entity:
      name: Benachrichtigungs-Service (Optional)
      description: Service f√ºr R√ºcksp√ºl-Benachrichtigungen
      default: ""
      selector:
        text:
    notify_before_backwash:
      name: Vorank√ºndigung
      description: Benachrichtigung vor automatischer R√ºcksp√ºlung
      default: true
      selector:
        boolean:
    notify_after_backwash:
      name: Abschluss-Meldung
      description: Benachrichtigung nach abgeschlossener R√ºcksp√ºlung
      default: true
      selector:
        boolean:

variables:
  backwash_entity: !input backwash_switch
  rinse_entity: !input rinse_switch
  pump_entity: !input pump_switch
  pressure_sensor: !input filter_pressure_sensor
  water_level_sensor_entity: !input water_level_sensor
  notify_service: !input notification_entity
  
  # Aktueller Status
  current_pressure: >
    {{ states(pressure_sensor) | float(0) if pressure_sensor != "" else 0 }}
  current_water_level: >
    {{ states(water_level_sensor_entity) | float(100) if water_level_sensor_entity != "" else 100 }}
  pump_is_running: "{{ is_state(pump_entity, 'on') }}"
  
  # Bedingungen pr√ºfen
  pressure_too_high: >
    {{ enable_pressure_control and pressure_sensor != "" and current_pressure > max_filter_pressure }}
  water_level_ok: >
    {{ not enable_water_level_check or water_level_sensor_entity == "" or current_water_level >= min_water_level }}
  
  # Zeitberechnung f√ºr n√§chste geplante R√ºcksp√ºlung
  last_backwash: >
    {{ states('input_datetime.pool_last_backwash') | as_datetime | default(now() - timedelta(days=backwash_interval_days + 1)) }}
  days_since_backwash: >
    {{ (now() - last_backwash).days }}
  scheduled_backwash_due: >
    {{ enable_scheduled_backwash and days_since_backwash >= backwash_interval_days }}
  
  # Runtime-basierte √úberpr√ºfung (erfordert Pump Runtime Sensor)
  pump_runtime_hours: >
    {{ states('sensor.pool_pump_runtime_hours') | float(0) }}
  runtime_backwash_due: >
    {{ enable_runtime_control and pump_runtime_hours >= max_pump_runtime_hours }}

trigger:
  # Druckbasierte Trigger
  - platform: numeric_state
    entity_id: !input filter_pressure_sensor
    above: !input max_filter_pressure
    for:
      minutes: 15
    id: pressure_high
  
  # Zeitbasierte Trigger
  - platform: time
    at: !input backwash_time
    id: scheduled_time
  
  # Manuelle √úberpr√ºfung alle 6 Stunden
  - platform: time_pattern
    hours: /6
    id: periodic_check
  
  # Pumpen-Status √Ñnderung
  - platform: state
    entity_id: !input pump_switch
    from: "on"
    to: "off"
    for:
      minutes: 5
    id: pump_stopped

condition:
  - condition: template
    value_template: >
      {{ states(backwash_entity) not in ['unavailable', 'unknown'] and
         states(pump_entity) not in ['unavailable', 'unknown'] }}

action:
  - choose:
      # === Druckbedingte R√ºcksp√ºlung ===
      - conditions:
          - condition: trigger
            id: pressure_high
          - condition: template
            value_template: "{{ pressure_too_high and water_level_ok }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ notify_service != '' and notify_before_backwash }}"
            then:
              - service: "{{ notify_service }}"
                data:
                  title: "üîÑ Automatische R√ºcksp√ºlung startet"
                  message: >
                    Filterdruck zu hoch: {{ current_pressure }} bar (Max: {{ max_filter_pressure }} bar)
                    R√ºcksp√ºlung wird automatisch gestartet.
          - perform: backwash_cycle

      # === Geplante R√ºcksp√ºlung ===
      - conditions:
          - condition: trigger
            id: scheduled_time
          - condition: template
            value_template: "{{ scheduled_backwash_due and water_level_ok }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ notify_service != '' and notify_before_backwash }}"
            then:
              - service: "{{ notify_service }}"
                data:
                  title: "üïê Geplante R√ºcksp√ºlung"
                  message: >
                    Letzte R√ºcksp√ºlung vor {{ days_since_backwash }} Tagen
                    Planm√§√üige R√ºcksp√ºlung wird gestartet.
          - perform: backwash_cycle

      # === Laufzeitbedingte R√ºcksp√ºlung ===
      - conditions:
          - condition: trigger
            id: periodic_check
          - condition: template
            value_template: "{{ runtime_backwash_due and water_level_ok }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ notify_service != '' and notify_before_backwash }}"
            then:
              - service: "{{ notify_service }}"
                data:
                  title: "‚è±Ô∏è Laufzeitbedingte R√ºcksp√ºlung"
                  message: >
                    Pumpenlaufzeit: {{ pump_runtime_hours }}h (Max: {{ max_pump_runtime_hours }}h)
                    R√ºcksp√ºlung wird gestartet.
          - perform: backwash_cycle

      # === Wasserstand zu niedrig ===
      - conditions:
          - condition: template
            value_template: "{{ not water_level_ok and enable_water_level_check }}"
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ pressure_too_high }}"
              - condition: template
                value_template: "{{ scheduled_backwash_due }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ notify_service != '' }}"
            then:
              - service: "{{ notify_service }}"
                data:
                  title: "‚ö†Ô∏è R√ºcksp√ºlung abgebrochen"
                  message: >
                    Wasserstand zu niedrig: {{ current_water_level }}cm (Min: {{ min_water_level }}cm)
                    Bitte Wasser nachf√ºllen vor R√ºcksp√ºlung.

  # === R√ºcksp√ºl-Zyklus Sequenz ===
  backwash_cycle:
    sequence:
      # 1. Pumpe stoppen und warten
      - if:
          - condition: template
            value_template: "{{ pump_is_running }}"
        then:
          - service: switch.turn_off
            target:
              entity_id: !input pump_switch
          - delay:
              seconds: !input pre_backwash_pump_off_time

      # 2. R√ºcksp√ºlung starten
      - service: violet_pool_controller.trigger_backwash
        target:
          entity_id: "{{ backwash_entity }}"
        data:
          duration: !input backwash_duration

      # 3. Warten bis R√ºcksp√ºlung beendet
      - delay:
          seconds: "{{ backwash_duration + 10 }}"

      # 4. Nachsp√ºlung (falls konfiguriert)
      - if:
          - condition: template
            value_template: "{{ rinse_entity != '' }}"

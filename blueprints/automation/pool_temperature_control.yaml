blueprint:
  name: Violet Pool - Intelligente Temperatursteuerung
  description: |
    Automatische Pooltemperatursteuerung basierend auf Tageszeit, Wetter und Solarenergie. 
    Unterstützt sowohl Heizung als auch Solarabsorber mit intelligentem Energiemanagement.
  domain: automation
  source_url: https://github.com/xerolux/violet-hass/blob/main/blueprints/automation/pool_temperature_control.yaml
  homeassistant:
    min_version: "2024.6.0"
  input:
    pool_temperature_sensor:
      name: Pool-Temperatursensor
      description: Sensor für die aktuelle Pooltemperatur
      selector:
        entity:
          filter:
            - integration: violet_pool_controller
            - domain: sensor
            - device_class: temperature
    pool_heater:
      name: Pool-Heizung
      description: Klima-Entität für die Poolheizung
      selector:
        entity:
          filter:
            - integration: violet_pool_controller
            - domain: climate
    pool_solar:
      name: Solarabsorber (Optional)
      description: Klima-Entität für den Solarabsorber
      default: ""
      selector:
        entity:
          filter:
            - integration: violet_pool_controller
            - domain: climate
          multiple: false
    target_temp_day:
      name: Zieltemperatur Tag
      description: Gewünschte Temperatur während des Tages
      default: 26
      selector:
        number:
          min: 20
          max: 35
          step: 0.5
          unit_of_measurement: °C
          mode: slider
    target_temp_night:
      name: Zieltemperatur Nacht
      description: Gewünschte Temperatur während der Nacht
      default: 24
      selector:
        number:
          min: 18
          max: 30
          step: 0.5
          unit_of_measurement: °C
          mode: slider
    day_start_time:
      name: Tagesbeginn
      description: Uhrzeit ab der die Tagestemperatur aktiviert wird
      default: "07:00"
      selector:
        time:
    night_start_time:
      name: Nachtbeginn
      description: Uhrzeit ab der die Nachttemperatur aktiviert wird
      default: "22:00"
      selector:
        time:
    outside_temp_sensor:
      name: Außentemperatursensor (Optional)
      description: Sensor für die Außentemperatur zur intelligenten Steuerung
      default: ""
      selector:
        entity:
          filter:
            - domain: sensor
            - device_class: temperature
          multiple: false
    solar_power_sensor:
      name: Solarleistungssensor (Optional)
      description: Sensor für die aktuelle Solarleistung
      default: ""
      selector:
        entity:
          filter:
            - domain: sensor
            - device_class: power
          multiple: false
    min_solar_power:
      name: Minimale Solarleistung
      description: Mindestleistung in Watt für effektive Solarheizung
      default: 1000
      selector:
        number:
          min: 500
          max: 5000
          step: 100
          unit_of_measurement: W
          mode: box
    energy_saving_mode:
      name: Energiesparmodus
      description: Aktiviert intelligente Energiesparfunktionen
      default: true
      selector:
        boolean:
    max_temp_difference:
      name: Maximale Temperaturdifferenz
      description: Maximaler Unterschied zur Zieltemperatur bevor Heizung aktiviert wird
      default: 2.0
      selector:
        number:
          min: 0.5
          max: 5.0
          step: 0.5
          unit_of_measurement: °C
          mode: slider
    notification_entity:
      name: Benachrichtigungs-Service (Optional)
      description: Service für Benachrichtigungen (z.B. notify.mobile_app_phone)
      default: ""
      selector:
        text:

variables:
  pool_temp_sensor: !input pool_temperature_sensor
  heater_entity: !input pool_heater
  solar_entity: !input pool_solar
  target_day: !input target_temp_day
  target_night: !input target_temp_night
  outside_sensor: !input outside_temp_sensor
  solar_sensor: !input solar_power_sensor
  min_solar: !input min_solar_power
  energy_saving: !input energy_saving_mode
  max_diff: !input max_temp_difference
  notify_service: !input notification_entity
  
  # Zeit-basierte Variablen
  is_day: >
    {{ now().time() >= (day_start_time | as_datetime).time() and 
       now().time() < (night_start_time | as_datetime).time() }}
  target_temp: "{{ target_day if is_day else target_night }}"
  
  # Temperatur-Variablen
  current_temp: "{{ states(pool_temp_sensor) | float(0) }}"
  temp_diff: "{{ target_temp - current_temp }}"
  
  # Externe Sensoren
  outside_temp: >
    {{ states(outside_sensor) | float(20) if outside_sensor and outside_sensor != "" else 20 }}
  solar_power: >
    {{ states(solar_sensor) | float(0) if solar_sensor and solar_sensor != "" else 0 }}
  
  # Solar-Verfügbarkeit
  solar_available: >
    {{ solar_power > min_solar and outside_temp > 15 and 
       solar_entity and solar_entity != "" }}

trigger:
  - platform: time
    at: !input day_start_time
    id: day_start
  - platform: time
    at: !input night_start_time
    id: night_start
  - platform: numeric_state
    entity_id: !input pool_temperature_sensor
    for:
      minutes: 5
    id: temp_change
  - platform: state
    entity_id: !input solar_power_sensor
    for:
      minutes: 2
    id: solar_change
    not_to:
      - "unavailable"
      - "unknown"
  - platform: time_pattern
    minutes: /30
    id: periodic_check

condition:
  - condition: template
    value_template: >
      {{ states(heater_entity) not in ['unavailable', 'unknown'] }}

action:
  - choose:
      # === Tagesbeginn: Tagestemperatur setzen ===
      - conditions:
          - condition: trigger
            id: day_start
        sequence:
          - service: climate.set_temperature
            target:
              entity_id: !input pool_heater
            data:
              temperature: "{{ target_day }}"
          - if: 
              - condition: template
                value_template: "{{ notify_service != '' }}"
            then:
              - service: "{{ notify_service }}"
                data:
                  title: "🌅 Pool-Temperatur"
                  message: "Tagestemperatur auf {{ target_day }}°C gesetzt"

      # === Nachtbeginn: Nachttemperatur setzen ===
      - conditions:
          - condition: trigger
            id: night_start
        sequence:
          - service: climate.set_temperature
            target:
              entity_id: !input pool_heater
            data:
              temperature: "{{ target_night }}"
          - if:
              - condition: template
                value_template: "{{ notify_service != '' }}"
            then:
              - service: "{{ notify_service }}"
                data:
                  title: "🌙 Pool-Temperatur"
                  message: "Nachttemperatur auf {{ target_night }}°C gesetzt"

      # === Temperatur zu niedrig: Heizung aktivieren ===
      - conditions:
          - condition: template
            value_template: "{{ temp_diff > max_diff }}"
          - condition: or
            conditions:
              - condition: trigger
                id: temp_change
              - condition: trigger
                id: periodic_check
              - condition: trigger
                id: solar_change
        sequence:
          - choose:
              # Solar verfügbar und ausreichend: Solar bevorzugen
              - conditions:
                  - condition: template
                    value_template: "{{ solar_available }}"
                sequence:
                  - service: climate.set_hvac_mode
                    target:
                      entity_id: "{{ solar_entity }}"
                    data:
                      hvac_mode: heat
                  - service: climate.set_temperature
                    target:
                      entity_id: "{{ solar_entity }}"
                    data:
                      temperature: "{{ target_temp }}"
                  # Heizung auf Auto oder aus, je nach Energiesparmodus
                  - service: climate.set_hvac_mode
                    target:
                      entity_id: !input pool_heater
                    data:
                      hvac_mode: "{{ 'auto' if energy_saving else 'heat' }}"
                  - if:
                      - condition: template
                        value_template: "{{ notify_service != '' }}"
                    then:
                      - service: "{{ notify_service }}"
                        data:
                          title: "☀️ Solar-Heizung"
                          message: "Solar aktiviert ({{ solar_power }}W), Ziel: {{ target_temp }}°C"
            # Kein Solar verfügbar: Normale Heizung nutzen
            default:
              - service: climate.set_hvac_mode
                target:
                  entity_id: !input pool_heater
                data:
                  hvac_mode: heat
              - service: climate.set_temperature
                target:
                  entity_id: !input pool_heater
                data:
                  temperature: "{{ target_temp }}"
              # Große Temperaturdifferenz: Warnung
              - if:
                  - condition: template
                    value_template: "{{ notify_service != '' and temp_diff > (max_diff * 1.5) }}"
                then:
                  - service: "{{ notify_service }}"
                    data:
                      title: "🔥 Pool-Heizung aktiviert"
                      message: "Temperatur: {{ current_temp }}°C → {{ target_temp }}°C (Δ{{ '%.1f' | format(temp_diff) }}°C)"

      # === Zieltemperatur erreicht: Energiesparmodus ===
      - conditions:
          - condition: template
            value_template: "{{ temp_diff <= 0.5 and energy_saving }}"
          - condition: or
            conditions:
              - condition: trigger
                id: temp_change
              - condition: trigger
                id: periodic_check
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input pool_heater
            data:
              hvac_mode: auto
          - if:
              - condition: template
                value_template: "{{ solar_entity and solar_entity != '' }}"
            then:
              - service: climate.set_hvac_mode
                target:
                  entity_id: "{{ solar_entity }}"
                data:
                  hvac_mode: auto
          - if:
              - condition: template
                value_template: "{{ notify_service != '' }}"
            then:
              - service: "{{ notify_service }}"
                data:
                  title: "✅ Pool-Temperatur erreicht"
                  message: "Zieltemperatur {{ target_temp }}°C erreicht, Energiesparmodus aktiviert"

mode: single
max_exceeded: silent

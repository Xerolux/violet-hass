blueprint:
  name: Violet Pool - Intelligente Temperatursteuerung
  description: Automatische Pooltemperatursteuerung basierend auf Tageszeit, Wetter und Solarenergie. Unterstützt Heizung und Solarabsorber.
  domain: automation
  source_url: https://github.com/xerolux/violet-hass/blob/main/blueprints/automation/pool_temperature_control.yaml
  input:
    pool_temperature_sensor:
      name: Pool-Temperatursensor
      description: Sensor für aktuelle Pooltemperatur.
      selector:
        entity:
          integration: violet_pool_controller
          domain: sensor
          device_class: temperature
    pool_heater:
      name: Pool-Heizung
      description: Klima-Entität für Poolheizung.
      selector:
        entity:
          integration: violet_pool_controller
          domain: climate
    pool_solar:
      name: Solarabsorber
      description: Klima-Entität für Solarabsorber (optional).
      default: []
      selector:
        entity:
          integration: violet_pool_controller
          domain: climate
    target_temp_day:
      name: Zieltemperatur Tag
      description: Temperatur tagsüber.
      default: 26
      selector:
        number:
          min: 20
          max: 35
          step: 0.5
          unit_of_measurement: °C
    target_temp_night:
      name: Zieltemperatur Nacht
      description: Temperatur nachts.
      default: 24
      selector:
        number:
          min: 18
          max: 30
          step: 0.5
          unit_of_measurement: °C
    day_start_time:
      name: Tagesbeginn
      description: Uhrzeit für Tagestemperatur.
      default: "07:00"
      selector:
        time:
    night_start_time:
      name: Nachtbeginn
      description: Uhrzeit für Nachttemperatur.
      default: "22:00"
      selector:
        time:
    outside_temp_sensor:
      name: Außentemperatursensor
      description: Sensor für Außentemperatur (optional).
      default: []
      selector:
        entity:
          domain: sensor
          device_class: temperature
    solar_power_sensor:
      name: Solarleistungssensor
      description: Sensor für Solarleistung (optional).
      default: []
      selector:
        entity:
          domain: sensor
          device_class: power
    min_solar_power:
      name: Minimale Solarleistung
      description: Mindestleistung für Solarheizung.
      default: 1000
      selector:
        number:
          min: 500
          max: 5000
          step: 100
          unit_of_measurement: W
    energy_saving_mode:
      name: Energiesparmodus
      description: Aktiviere energieeffiziente Heizstrategie.
      default: true
      selector:
        boolean:
    max_temp_difference:
      name: Max. Temperaturdifferenz
      description: Max. Unterschied zur Zieltemperatur vor Aktivierung.
      default: 2.0
      selector:
        number:
          min: 0.5
          max: 5.0
          step: 0.5
          unit_of_measurement: °C
    notification_device:
      name: Benachrichtigungsgerät
      description: Gerät für Benachrichtigungen (optional).
      default: []
      selector:
        device:
          integration: mobile_app

variables:
  pool_temp_sensor: !input pool_temperature_sensor
  heater_entity: !input pool_heater
  solar_entity: !input pool_solar
  target_day: !input target_temp_day
  target_night: !input target_temp_night
  outside_sensor: !input outside_temp_sensor
  solar_sensor: !input solar_power_sensor
  min_solar: !input min_solar_power
  energy_saving: !input energy_saving_mode
  max_diff: !input max_temp_difference
  notify_device: !input notification_device
  is_day: "{{ now().time() >= time(!input day_start_time) and now().time() < time(!input night_start_time) }}"
  target_temp: "{{ target_day if is_day else target_night }}"
  current_temp: "{{ states(pool_temp_sensor) | float(0) }}"
  temp_diff: "{{ target_temp - current_temp }}"
  outside_temp: "{{ states(outside_sensor) | float(20) if outside_sensor else 20 }}"
  solar_power: "{{ states(solar_sensor) | float(0) if solar_sensor else 0 }}"
  solar_available: "{{ solar_power > min_solar and outside_temp > 15 }}"

trigger:
  - platform: time
    at: !input day_start_time
    id: day_start
  - platform: time
    at: !input night_start_time
    id: night_start
  - platform: numeric_state
    entity_id: !input pool_temperature_sensor
    for:
      minutes: 5
    id: temp_change
  - platform: state
    entity_id: !input solar_power_sensor
    for:
      minutes: 2
    id: solar_change
  - platform: time_pattern
    minutes: /30
    id: periodic_check

condition:
  - "{{ states(heater_entity) in ['heat', 'auto', 'off'] }}"

action:
  - choose:
      # Tagesbeginn: Tagestemperatur setzen
      - conditions:
          - condition: trigger
            id: day_start
        sequence:
          - service: climate.set_temperature
            target:
              entity_id: !input pool_heater
            data:
              temperature: !input target_temp_day
          - condition: template
            value_template: "{{ notify_device != [] }}"
            sequence:
              - device_id: !input notification_device
                domain: mobile_app
                type: notify
                title: Pool-Heizung
                message: "Tagestemperatur auf {{ target_day }}°C gesetzt"

      # Nachtbeginn: Nachttemperatur setzen
      - conditions:
          - condition: trigger
            id: night_start
        sequence:
          - service: climate.set_temperature
            target:
              entity_id: !input pool_heater
            data:
              temperature: !input target_temp_night
          - condition: template
            value_template: "{{ notify_device != [] }}"
            sequence:
              - device_id: !input notification_device
                domain: mobile_app
                type: notify
                title: Pool-Heizung
                message: "Nachttemperatur auf {{ target_night }}°C gesetzt"

      # Temperatur zu niedrig: Heizung aktivieren
      - conditions:
          - "{{ temp_diff > max_diff }}"
          - condition: or
            conditions:
              - condition: trigger
                id: temp_change
              - condition: trigger
                id: periodic_check
        sequence:
          - choose:
              # Solar verfügbar: Solar bevorzugen
              - conditions: "{{ solar_available and solar_entity != [] }}"
                sequence:
                  - service: climate.set_hvac_mode
                    target:
                      entity_id: !input pool_solar
                    data:
                      hvac_mode: heat
                  - service: climate.set_temperature
                    target:
                      entity_id: !input pool_solar
                    data:
                      temperature: "{{ target_temp }}"
                  - if: "{{ energy_saving }}"
                    then:
                      - service: climate.set_hvac_mode
                        target:
                          entity_id: !input pool_heater
                        data:
                          hvac_mode: auto
                    else:
                      - service: climate.set_hvac_mode
                        target:
                          entity_id: !input pool_heater
                        data:
                          hvac_mode: heat
              # Kein Solar: Heizung nutzen
              default:
                - service: climate.set_hvac_mode
                  target:
                    entity_id: !input pool_heater
                  data:
                    hvac_mode: heat
                - service: climate.set_temperature
                  target:
                    entity_id: !input pool_heater
                  data:
                    temperature: "{{ target_temp }}"
          - condition: template
            value_template: "{{ notify_device != [] and temp_diff > (max_diff * 1.5) }}"
            sequence:
              - device_id: !input notification_device
                domain: mobile_app
                type: notify
                title: Pool-Temperatur niedrig
                message: "Aktuell: {{ current_temp }}°C, Ziel: {{ target_temp }}°C, Heizung aktiviert."

      # Temperatur erreicht: Energiesparmodus
      - conditions:
          - "{{ temp_diff <= 0.5 and energy_saving }}"
          - condition: or
            conditions:
              - condition: trigger
                id: temp_change
              - condition: trigger
                id: periodic_check
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input pool_heater
            data:
              hvac_mode: auto
          - if: "{{ solar_entity != [] }}"
            then:
              - service: climate.set_hvac_mode
                target:
                  entity_id: !input pool_solar
                data:
                  hvac_mode: auto

mode: single
max_exceeded: silent

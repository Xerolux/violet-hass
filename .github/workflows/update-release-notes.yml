name: Update Release Notes and Post to X

on:
  release:
    types: [published]

jobs:
  generate-release-notes:
    runs-on: ubuntu-latest
    outputs:
      release-notes: ${{ steps.generate.outputs.release-notes }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Get full history for commit parsing

      - name: Get release version and date
        id: version
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#v}" # Remove 'v' prefix if present
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Validate tag format
        run: |
          if [[ ! "${{ github.event.release.tag_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Invalid tag format: ${{ github.event.release.tag_name }}"
            exit 1
          fi

      - name: Parse commits since last release
        id: commits
        run: |
          # Get the previous release tag
          PREV_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | sed -n '2p')
          
          if [ -z "$PREV_TAG" ]; then
            echo "No previous release found, using all commits"
            COMMITS=$(git log --oneline --pretty=format:"- %s" | head -20)
          else
            echo "Getting commits since $PREV_TAG"
            COMMITS=$(git log ${PREV_TAG}..${{ github.event.release.tag_name }} --oneline --pretty=format:"- %s")
          fi
          
          # Categorize commits
          BUG_FIXES=$(echo "$COMMITS" | grep -iE "(fix|bug|patch)" | head -5 || echo "")
          IMPROVEMENTS=$(echo "$COMMITS" | grep -iE "(improve|enhance|update|refactor)" | head -5 || echo "")
          NEW_FEATURES=$(echo "$COMMITS" | grep -iE "(add|feat|feature|new)" | head -5 || echo "")
          
          # Set outputs (escape newlines)
          echo "bug-fixes<<EOF" >> $GITHUB_OUTPUT
          echo "$BUG_FIXES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "improvements<<EOF" >> $GITHUB_OUTPUT
          echo "$IMPROVEMENTS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "new-features<<EOF" >> $GITHUB_OUTPUT
          echo "$NEW_FEATURES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: generate
        run: |
          cat > temp_release_notes.md << 'EOL'
          # ${{ github.event.release.tag_name }} ‚Äì ${{ steps.version.outputs.date }} ‚Äì Bug Fixes & Improvements üéâ

          ## üîß Bug Fixes:
          ${{ steps.commits.outputs.bug-fixes }}
          ${{ steps.commits.outputs.bug-fixes == '' && '- Minor bug fixes and stability improvements' || '' }}

          ## üöÄ Improvements:
          ${{ steps.commits.outputs.improvements }}
          ${{ steps.commits.outputs.improvements == '' && '- Performance optimizations and code improvements' || '' }}

          ## ‚ú® New Features:
          ${{ steps.commits.outputs.new-features }}
          ${{ steps.commits.outputs.new-features == '' && '- Enhanced pool controller functionality' || '' }}

          ---
          
          ## ‚ù§Ô∏è Support My Project:
          - [‚òï Buy Me a Coffee](https://buymeacoffee.com/xerolux)
          - [üöó Use my Tesla referral link](https://ts.la/sebastian564489)
          
          Every contribution, no matter how small, is a huge motivation! Thank you so much for your support! üôè
          
          ---
          
          ## üí¨ Feedback & Contributions:
          I'm always open to feedback, suggestions, or contributions from the community. Feel free to open an issue or submit a pull request.
          
          **Download:** [violet_pool_controller.zip](${{ github.event.release.html_url }}/download/violet_pool_controller.zip)
          
          Thank you for your support, and enjoy the new version! üöÄ
          EOL
          
          # Output the content for use in other jobs
          echo "release-notes<<EOFNOTES" >> $GITHUB_OUTPUT
          cat temp_release_notes.md >> $GITHUB_OUTPUT
          echo "EOFNOTES" >> $GITHUB_OUTPUT

  update-release-notes:
    runs-on: ubuntu-latest
    needs: generate-release-notes
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create RELEASE_NOTES.md if not exists
        run: |
          if [ ! -f RELEASE_NOTES.md ]; then
            touch RELEASE_NOTES.md
          fi

      - name: Update release notes
        run: |
          # Prepend new release notes to existing file
          cat > temp_combined.md << 'EOFCOMBINED'
          ${{ needs.generate-release-notes.outputs.release-notes }}

          EOFCOMBINED
          
          # Add existing content if file exists and has content
          if [ -s RELEASE_NOTES.md ]; then
            echo "" >> temp_combined.md
            echo "---" >> temp_combined.md
            echo "" >> temp_combined.md
            cat RELEASE_NOTES.md >> temp_combined.md
          fi
          
          mv temp_combined.md RELEASE_NOTES.md

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add RELEASE_NOTES.md
          if git diff --cached --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          git commit -m "üîñ Update release notes for ${{ needs.generate-release-notes.outputs.version }}"
          git push

  post-release-to-x:
    runs-on: ubuntu-latest
    needs: [generate-release-notes, update-release-notes]
    if: success()
    steps:
      - name: Parse release info for X post
        id: parse
        run: |
          VERSION="${{ needs.generate-release-notes.outputs.version }}"
          REPO_NAME="Violet Pool Controller"
          
          # Create a condensed version for X (Twitter character limit)
          X_MESSAGE="üéâ New $REPO_NAME release v$VERSION is out!

          üîß Bug fixes & improvements
          üöÄ Enhanced pool control features  
          ‚ú® Better Home Assistant integration

          ‚ù§Ô∏è Support: https://buymeacoffee.com/xerolux
          üöó Tesla referral: https://ts.la/sebastian564489
          
          Download: ${{ github.event.release.html_url }}
          
          #HomeAssistant #PoolAutomation #OpenSource"
          
          # Output for next step (escape for JSON)
          echo "message<<EOFMSG" >> $GITHUB_OUTPUT
          echo "$X_MESSAGE" >> $GITHUB_OUTPUT
          echo "EOFMSG" >> $GITHUB_OUTPUT

      - name: Post to X (Twitter)
        uses: ethomson/send-tweet-action@v1
        with:
          status: ${{ steps.parse.outputs.message }}
          consumer-key: ${{ secrets.TWITTER_CONSUMER_API_KEY }}
          consumer-secret: ${{ secrets.TWITTER_CONSUMER_API_SECRET }}
          access-token: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          access-token-secret: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
        env:
          # Optional: Add debugging
          DEBUG: ${{ runner.debug }}

      - name: Create X post summary
        run: |
          echo "## üê¶ X (Twitter) Post Summary" >> $GITHUB_STEP_SUMMARY
          echo "Successfully posted release announcement to X!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release:** ${{ needs.generate-release-notes.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** ${{ github.event.release.html_url }}" >> $GITHUB_STEP_SUMMARY

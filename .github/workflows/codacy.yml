name: Codacy Security Scan

on:
  push:
    branches: [ "main" ]
    paths:  # Only run if files in these paths change
      - 'custom_components/violet_pool_controller/**'
      - '.github/workflows/codacy-security-scan.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'custom_components/violet_pool_controller/**'
      - '.github/workflows/codacy-security-scan.yml'
  schedule:
    - cron: '20 13 * * TUE'  # Run weekly on Tuesday at 13:20 UTC
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: read  # Needed to checkout the repository

jobs:
  codacy-security-scan:
    permissions:
      contents: read  # for actions/checkout to fetch code
      security-events: write  # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read  # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: Codacy Security Scan
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout code
        uses: actions/checkout@v4

      # Execute Codacy Analysis CLI and generate a SARIF output
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@master # Use @master for latest, or specify a version
        with:
          # Get your project token from the Codacy UI:
          # https://app.codacy.com/projects/<YOUR_PROJECT>/settings/integrations
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}  #  Use a secret!
          verbose: true
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true  # Enable GitHub Code Scanning compatibility
          # Force 0 exit code to allow SARIF file generation, even on errors
          max-allowed-issues: 2147483647

      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
